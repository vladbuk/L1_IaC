pipeline {
  agent { label 'agent-ut-wpprod' }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-access-token')
    }
    stages {
        stage('Deploying') {
            steps {
                script{
                    command='''
                        mkdir -p $HOME/nuxt-docker && cd $HOME/nuxt-docker/
                        docker pull vladbuk/nuxt-docker-production:latest
                        GET_ID="docker ps -aqf name=nuxt-docker"
                        CONTAINER_ID=$(eval $GET_ID)
                        if [[ $CONTAINER_ID ]]
                        then
                            docker rm -f $CONTAINER_ID
                            echo Container $CONTAINER_ID deleted and will be created again.
                            docker run -d -t --name nuxt-docker --restart always -p 8080:8080 vladbuk/nuxt-docker-production:latest
                        else
                            echo -e Container does not exist. It will be created.\n
                            docker run -d -t --name nuxt-docker --restart always -p 8080:8080 vladbuk/nuxt-docker-production:latest
                        fi
                        CONTAINER_ID=$(eval $GET_ID)
                        echo -e "Container id = $CONTAINER_ID\n"
                        docker image prune -f
                    '''

                    // Copy file to remote server 1
                    sshPublisher(publishers: [sshPublisherDesc(configName: 't2micro_ubuntu_prod_1', verbose: 'true',
                    transfers: [ sshTransfer(flatten: false,
                        execCommand: command
                        )])
                    ])

                    // Copy file to remote server 2
                    sshPublisher(publishers: [sshPublisherDesc(configName: 't2micro_ubuntu_prod_2', verbose: 'true',
                    transfers: [ sshTransfer(flatten: false,
                        execCommand: command
                        )])
                    ])
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout'
    }
  }
}
